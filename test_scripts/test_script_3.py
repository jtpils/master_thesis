#!/usr/bin/env python

# Copyright (c) 2017 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.


# SABINA IS GIT BEGINNER


import glob
import os
import sys

try:
    sys.path.append(glob.glob('**/*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla
import numpy as np
import pandas as pd

import random
import time
import csv


def main():
    actor_list = []

    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.

    try:

        client = carla.Client('localhost', 2000)
        client.set_timeout(2.0)
        world = client.get_world()
        blueprint_library = world.get_blueprint_library()
        bp = random.choice(blueprint_library.filter('vehicle'))
        color = random.choice(bp.get_attribute('color').recommended_values)
        bp.set_attribute('color', color)
        transform = random.choice(world.get_map().get_spawn_points())

        # So let's tell the world to spawn the vehicle.
        vehicle = world.spawn_actor(bp, transform)
        actor_list.append(vehicle)
        print('created %s' % vehicle.type_id)
        vehicle.set_autopilot(True)

        # Let's add now a "depth" camera attached to the vehicle. Note that the
        # transform we give here is now relative to the vehicle.
        lidar_bp = blueprint_library.find('sensor.lidar.ray_cast')
        lidar_transform = carla.Transform(carla.Location(x=0, y=0, z=2.4)) # investigate which transform that is suitable
        myLidar = world.spawn_actor(lidar_bp, lidar_transform, attach_to=vehicle)
        actor_list.append(myLidar)
        print('created %s' % myLidar.type_id)
        myLidar.range = 30
        print('LiDAR range set to: ', myLidar.range)


        # back-up solution
        '''def save_lidar_data(data):
            print(data.transform.location.x)  # print stuff for debug reasons
            # remember to set a suitable folder name below: _out_......
            data.save_to_disk('_out_190129/%06d' % data.frame_number)
            # here we want to write to another file as well: location, yaw, frame
            # eg csv file with headings: frame, global x, y, z, yaw
            # write new row with these values. csv-file has to be declared first I think.


        myLidar.listen(lambda data: save_lidar_data(data)) # data is a LidarMeasurement object
        time.sleep(2) # collect data for x seconds'''

        # DO NOT FORGET TO CHANGE THE CSV FILE NAME! AND IN THE SAVE_LIDAR_DATA FUNCTION AS WELL!
        with open('lidardata_190130.csv', mode = 'w') as csv_file:
            fieldnames = ['frame_number', 'x', 'y', 'z', 'yaw']
            csv_writer = csv.writer(csv_file, delimiter = ',' , quotechar='"', quoting=csv.QUOTE_MINIMAL)

            csv_writer.writerow(fieldnames)


        def save_lidar_data(data):
            # print(data.transform.location.x)  # print stuff for debug reasons
            # remember to set a suitable folder name below: _out_......
            data.save_to_disk('_out_190129/%06d' % data.frame_number)
            # here we want to write to another file as well: location, yaw, frame
            # eg csv file with headings: frame, global x, y, z, yaw
            # write new row with these values. csv-file has to be declared first I think.


            with open('lidardata_190130.csv', mode = 'a') as csv_file_2:
                csv_writer_2 = csv.writer(csv_file_2, delimiter = ',' , quotechar='"', quoting=csv.QUOTE_MINIMAL)
                csv_writer_2.writerow([data.frame_number, data.transform.location.x, data.transform.location.y, data.transform.location.z, data.transform.rotation.yaw])







            # tried to create a dataframe woth panda, however it wont append the new data when running the code. Need to have some sort of global data frame that we can append
            # new data to.
            #df = pd.DataFrame( columns = ['frame number','x', 'y', 'z', 'yaw'])
            #df2 = pd.DataFrame([[data.frame_number, data.transform.location.x, data.transform.location.y, data.transform.location.z,  data.transform.rotation.yaw]], columns = ['frame number','x', 'y', 'z', 'yaw'] )
            #df.append(df2)

            #print df





        myLidar.listen(lambda data: save_lidar_data(data)) # data is a LidarMeasurement object
        time.sleep(2) # collect data for x seconds



        # THIS BELOW WORKS! location.x and transform.location.x seems to be the same
        '''i = 0
        while i<1:
            print('Lidar location: ' ,  myLidar.get_location().x, myLidar.get_location().y, myLidar.get_location().z)
            print('Lidar transform: ',  myLidar.get_transform().location.x, myLidar.get_transform().location.y, myLidar.get_transform().location.z)
            print('Vehicle location: ', vehicle.get_location().x, vehicle.get_location().y, vehicle.get_location().z)
            print('Vehicle transform: ', vehicle.get_transform().location.x, vehicle.get_transform().location.y, vehicle.get_transform().location.z)
            print('Lidar heading: ', myLidar.get_transform().rotation.yaw)
            print('Vehicle heading: ', vehicle.get_transform().rotation.yaw)
            i = i + 1
            #time.sleep(1)'''




    finally:

        print('destroying actors')
        for actor in actor_list:
            actor.destroy()
        print('done.')


if __name__ == '__main__':

    main()
